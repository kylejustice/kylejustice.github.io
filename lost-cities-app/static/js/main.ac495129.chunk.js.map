{"version":3,"sources":["logo.svg","components/Number.js","components/Wager.js","components/NumberList.js","containers/VisibleNumberList.js","appActions.js","components/PlayerList.js","containers/VisiblePlayerToggle.js","App.js","serviceWorker.js","appReducers.js","index.js"],"names":["module","exports","COLOR_CLASS","gold","white","blue","green","red","purple","Number","onClick","playerId","colorId","number","activePlayer","playerName","type","className","disabled","Wager","value","size","icon","faHandshake","faHandshakeSlash","NumberList","numbers","players","wagers","onWagerClick","onNumberClick","Object","entries","map","key","index","playerList","filter","player","VisibleNumberList","connect","state","dispatch","toggleWager","toggleNumber","PlayerList","onPlayerClick","playerScore","getVisiblePlayers","forEach","keys","colorScore","playerNumbers","numberOfCards","length","getPlayerScore","VisiblePlayerToggle","console","log","togglePlayer","App","Boolean","window","location","hostname","match","BOARD_COLORS","INITIAL_PLAYERS","initialNumbers","initialNumbersNew","color","initialWagers","i","push","createReducer","TOGGLE_NUMBER","action","TOGGLE_WAGER","lostCitiesApp","combineReducers","assign","store","createStore","getState","subscribe","unsubscribe","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.ac495129.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react'\nimport PropTypes from 'prop-types'\n\n// TODO Refactor into separate file, common area\nconst COLOR_CLASS = {\n\tgold: \"warning\",\n\twhite: \"secondary\",\n\tblue: \"primary\",\n\tgreen: \"success\",\n\tred: \"danger\",\n\tpurple: \"info\"\n};\n\nconst Number = ({ onClick, playerId, colorId, number, activePlayer, playerName }) => (\n\t<button\n\t\tonClick={onClick}\n\t\ttype={'button'}\n\t\tclassName={`p-3 btn btn-${playerId === 'none' ? 'outline-' : ''}${COLOR_CLASS[colorId]} btn-lg btn-block`}\n\t\tdisabled={playerId !== 'none' && activePlayer !== playerId}\n\t>\n\t\t{number}\n\n\t</button>\n\n)\n\nNumber.propTypes = {\n\tonClick: PropTypes.func.isRequired,\n\tplayerId: PropTypes.string.isRequired,\n\tcolorId: PropTypes.string.isRequired,\n\tnumber: PropTypes.number.isRequired,\n\tactivePlayer: PropTypes.string.isRequired,\n\tplayerName: PropTypes.string.isRequired\n}\n\nexport default Number","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faHandshake, faHandshakeSlash } from '@fortawesome/free-solid-svg-icons'\n\n// TODO Refactor into separate file, common area\nconst COLOR_CLASS = {\n\tgold: \"warning\",\n\twhite: \"secondary\",\n\tblue: \"primary\",\n\tgreen: \"success\",\n\tred: \"danger\",\n\tpurple: \"info\"\n};\n\nconst Wager = ({ onClick, value, colorId }) => (\n\n\t<button\n\t\tonClick={onClick}\n\t\ttype={'button'}\n\t\tclassName={`p-3 btn btn-${value === 0 ? 'outline-' : ''}${COLOR_CLASS[colorId]} btn-lg btn-block`}\n\t>\n\n\t\t<FontAwesomeIcon size={'sm'} icon={0 < value ? faHandshake : faHandshakeSlash} />\n\t\t{1 < value ? <FontAwesomeIcon className={'ml-md-2'} size={'sm'} icon={faHandshake} /> : ''}\n\t\t{2 < value ? <FontAwesomeIcon className={'ml-md-2'} size={'sm'} icon={faHandshake} /> : ''}\n\t</button>\n\n)\n\nWager.propTypes = {\n\tonClick: PropTypes.func.isRequired,\n\tvalue: PropTypes.number.isRequired\n}\n\nexport default Wager","import React from 'react'\nimport PropTypes from 'prop-types'\nimport Number from './Number'\nimport Wager from './Wager'\n\nconst NumberList = ({ numbers, players, wagers, onWagerClick, onNumberClick }) => (\n\n\t<div className={'row no-gutters'}>\n\n\t\t{Object.entries(numbers).map(([key, value]) => (\n\n\t\t\t<div key={key} className={`btn-group-vertical col ${key}`}>\n\n\t\t\t\t<Wager key={key} onClick={() => onWagerClick(players.activePlayer, key)}\n\t\t\t\t\t   value={wagers[key].value}\n\t\t\t\t\t   colorId={key}\n\t\t\t\t/>\n\n\t\t\t\t{numbers[key].map((number, index) => (\n\t\t\t\t\t<Number key={index} {...number} activePlayer={players.activePlayer} onClick={() => onNumberClick(players.activePlayer, number.colorId, number.number)}\n\t\t\t\t\t\t\tplayerName={number.playerId !== 'none' ? players.playerList.filter((player) => player.playerId === number.playerId)[0].playerName : 'None'}\n\t\t\t\t\t/>\n\t\t\t\t))}\n\n\t\t\t</div>\n\n\t\t))\n\t\t}\n\n\t</div>\n\n);\n\n// TODO Update with wagers\nNumberList.propTypes = {\n\tnumbers: PropTypes.shape({\n\t\toptionalObject: PropTypes.arrayOf(\n\t\t\tPropTypes.shape({\n\t\t\t\tplayerId: PropTypes.string.isRequired,\n\t\t\t\tcolorId: PropTypes.string.isRequired,\n\t\t\t\tnumber: PropTypes.number.isRequired\n\t\t\t})\n\t\t),\n\t}).isRequired,\n\tplayers: PropTypes.shape({\n\t\tactivePlayer: PropTypes.string.isRequired,\n\t\tplayerList: PropTypes.arrayOf(\n\t\t\tPropTypes.shape({\n\t\t\t\tplayerId: PropTypes.string.isRequired,\n\t\t\t\tplayerName: PropTypes.string.isRequired\n\t\t\t})\n\t\t)\n\t}).isRequired,\n\tonNumberClick: PropTypes.func.isRequired\n}\n\nexport default NumberList;\n","import { connect } from 'react-redux'\nimport {toggleNumber, toggleWager} from '../appActions'\nimport NumberList from '../components/NumberList'\n\nconst mapStateToProps = state => {\n\treturn {\n\t\tnumbers: state.numbers,\n\t\tplayers: state.players,\n\t\twagers: state.wagers[state.players.activePlayer]\n\t}\n}\n\nconst mapDispatchToProps = dispatch => {\n\treturn {\n\t\tonWagerClick: (playerId, colorId) => {\n\t\t\tdispatch(toggleWager(playerId, colorId))\n\t\t},\n\t\tonNumberClick: (playerId, colorId, number) => {\n\t\t\tdispatch(toggleNumber(playerId, colorId, number))\n\t\t}\n\t}\n}\n\nconst VisibleNumberList = connect(mapStateToProps, mapDispatchToProps)(NumberList)\n\nexport default VisibleNumberList","/*\n * Action Types\n */\n\nexport const TOGGLE_NUMBER = 'TOGGLE_NUMBER';\nexport const TOGGLE_WAGER = 'TOGGLE_WAGER';\nexport const TOGGLE_PLAYER = 'TOGGLE_PLAYER';\n\n/*\n * Action Creators\n */\n\nexport function toggleNumber(playerId, colorId, number) {\n\treturn { type: TOGGLE_NUMBER, playerId, colorId, number }\n}\n\nexport function toggleWager(playerId, colorId) {\n\treturn { type: TOGGLE_WAGER, playerId, colorId }\n}\n\nexport function togglePlayer(playerId) {\n\treturn { type: TOGGLE_PLAYER, playerId }\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nconst PlayerList = ({ players, onPlayerClick }) => (\n\t<div className={'row no-gutters justify-content-center'}>\n\n\t\t\t{players.playerList.map((player, index) => (\n\n\t\t\t\t<div className={'col'}>\n\t\t\t\t\t<button key={index} type=\"button\" className={`p-3 btn btn-secondary btn-lg btn-block ${players.activePlayer !== player.playerId ? 'active' : 'disabled'}`}\n\t\t\t\t\t\t\tonClick={() => onPlayerClick(player.playerId)}\n\t\t\t\t\t\t\tdisabled={players.activePlayer === player.playerId}\n\t\t\t\t\t>\n\t\t\t\t\t\t{player.playerName}\n\t\t\t\t\t\t<br/>\n\t\t\t\t\t\t{player.playerScore}\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\n\t\t\t))}\n\n\t</div>\n)\n\nPlayerList.propTypes = {\n\tplayers: PropTypes.shape({\n\t\t\tactivePlayer: PropTypes.string.isRequired,\n\t\t\tplayerList: PropTypes.arrayOf(\n\t\t\t\tPropTypes.shape({\n\t\t\t\t\tplayerId: PropTypes.string.isRequired,\n\t\t\t\t\tplayerName: PropTypes.string.isRequired,\n\t\t\t\t\tplayerScore: PropTypes.number.isRequired\n\t\t\t\t})\n\t\t\t)\n\t\t}).isRequired,\n\tonPlayerClick: PropTypes.func.isRequired\n};\n\nexport default PlayerList\n","import { connect } from 'react-redux'\nimport { togglePlayer } from '../appActions'\nimport PlayerList from '../components/PlayerList'\n\nconst getPlayerScore = (playerId, numbers, wagers) => {\n\n\tlet playerScore = 0;\n\n\t// Iterate through the different color groups\n\tObject.keys(numbers).forEach(function(key, index) {\n\n\t\t// Reset score for only this color\n\t\tlet colorScore = 0;\n\n\t\t// Filter only the numbers the user has selected\n\t\tconst playerNumbers = numbers[key].filter(number => number.playerId === playerId);\n\n\t\t// Iterate through the different numbers of the one color group\n\t\tplayerNumbers.forEach(number => {\n\t\t\tcolorScore += number.number;\n\t\t});\n\n\t\t// Calculate the final score for the color\n\t\tlet numberOfCards = playerNumbers.length + wagers[key].value;\n\n\t\tif(0 < numberOfCards){\n\n\t\t\t// Add to the overall player score this specific color's score\n\t\t\tplayerScore += ((colorScore - 20) * (wagers[key].value+1));\n\n\t\t\t// Check for post-wager bonus\n\t\t\tif(8 <= numberOfCards){\n\t\t\t\tplayerScore += 20;\n\t\t\t}\n\t\t}else{\n\t\t\t// No cards played, no score for this color\n\t\t}\n\n\t});\n\n\treturn playerScore;\n};\n\nconst getVisiblePlayers = (players, numbers, wagers) => {\n\tplayers.playerList.forEach(player => {\n\t\tplayer.playerScore = getPlayerScore(player.playerId, numbers, wagers[player.playerId]);\n\t});\n\n\treturn players;\n};\n\nconst mapStateToProps = state => {\n\treturn {\n\t\tplayers: getVisiblePlayers(state.players, state.numbers, state.wagers),\n\t\tnumbers: state.numbers,\n\t\twagers: state.wagers\n\t}\n}\n\nconst mapDispatchToProps = dispatch => {\n\treturn {\n\t\tonPlayerClick: (playerId) => {\n\n\t\t\tconsole.log(\"TOGGLE TO PLAYER: \" + playerId);\n\n\t\t\tdispatch(togglePlayer(playerId))\n\t\t}\n\t}\n}\n\nconst VisiblePlayerToggle = connect(mapStateToProps, mapDispatchToProps)(PlayerList)\n\nexport default VisiblePlayerToggle","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport VisibleNumberList from './containers/VisibleNumberList'\nimport VisiblePlayerToggle from \"./containers/VisiblePlayerToggle\"\n\nfunction App() {\n  return (\n      <div className={'container-fluid px-0'}>\n          <VisibleNumberList />\n          <VisiblePlayerToggle/>\n      </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { combineReducers } from 'redux'\nimport { createReducer } from '@reduxjs/toolkit'\n\nimport {\n\tTOGGLE_NUMBER,\n\tTOGGLE_WAGER,\n\tTOGGLE_PLAYER\n} from './appActions'\n\n// TODO Option for regular board or large board\n// const BOARD_COLORS = [\"gold\", \"white\", \"blue\", \"green\", \"red\", \"purple\"];\nconst BOARD_COLORS = [\"gold\", \"white\", \"blue\", \"green\", \"red\"];\n\nlet INITIAL_PLAYERS = {\n\tactivePlayer: 'player1',\n\tplayerList: [\n\t\t{\n\t\t\tplayerId: 'player1',\n\t\t\tplayerName: 'Kyle'\n\t\t},\n\t\t{\n\t\t\tplayerId: 'player2',\n\t\t\tplayerName: 'Neha'\n\t\t}\n\t]\n};\n\n// TODO Remove/cleanup old initial numbers logic\nlet initialNumbers = [];\n\n// TODO Iterate through BOARD_COLORS to init\nlet initialNumbersNew = {};\nBOARD_COLORS.forEach(color => {\n\tinitialNumbersNew[color] = [];\n});\nlet initialWagers = {};\n\nObject.keys(initialNumbersNew).forEach((key, index) => {\n\n\tconst MIN_VALUE = 2;\n\tconst MAX_VALUE = 10;\n\tfor(let i = MIN_VALUE; i <= MAX_VALUE; i++){\n\t\tinitialNumbersNew[key].push({\n\t\t\tplayerId: 'none',\n\t\t\tcolorId: key,\n\t\t\tnumber: i\n\t\t});\n\t}\n\t\n});\n\nINITIAL_PLAYERS.playerList.forEach(player => {\n\n\tinitialWagers[player.playerId] = {};\n\n\tBOARD_COLORS.forEach(color => {\n\t\tinitialWagers[player.playerId][color] = {\n\t\t\t// playerId: player.playerId,\n\t\t\t// colorId: color,\n\t\t\tvalue: 0\n\t\t}\n\t});\n\n});\n\nBOARD_COLORS.forEach(color => {\n\tconst MIN_VALUE = 2;\n\tconst MAX_VALUE = 10;\n\tfor(let i = MIN_VALUE; i <= MAX_VALUE; i++){\n\t\tinitialNumbers.push({\n\t\t\tplayerId: 'none',\n\t\t\tcolorId: color,\n\t\t\tnumber: i\n\t\t});\n\t}\n});\n\nconst numbers = createReducer(initialNumbersNew, {\n\tTOGGLE_NUMBER: (state, action) => {\n\t\tstate[action.colorId][action.number-2].playerId = state[action.colorId][action.number-2].playerId === 'none' ? action.playerId : 'none';\n\t}\n});\n\nfunction numbersOld(state = initialNumbers, action) {\n\tswitch (action.type) {\n\n\t\tcase TOGGLE_NUMBER:\n\n\t\t\tconsole.log(\"TOGGLE_NUMBER\");\n\n\t\t\treturn state.map((number) => {\n\t\t\t\tif (number.colorId === action.colorId && number.number === action.number) {\n\t\t\t\t\treturn Object.assign({}, number, {\n\t\t\t\t\t\tplayerId: number.playerId === 'none' ? action.playerId : 'none'\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t\treturn number\n\t\t\t});\n\n\t\tdefault:\n\t\t\treturn state;\n\t}\n}\n\nconst wagers = createReducer(initialWagers, {\n\tTOGGLE_WAGER: (state, action) => {\n\n\t\tstate[action.playerId][action.colorId].value += 1;\n\n\t\tif(3 < state[action.playerId][action.colorId].value){\n\t\t\tstate[action.playerId][action.colorId].value = 0;\n\t\t}\n\n\t}\n});\n\nfunction wagersOLD(state = [], action) {\n\tswitch (action.type) {\n\t\tcase TOGGLE_WAGER:\n\n\t\t\t// Find if the wager is already active, or needs toggled to active\n\t\t\tlet wagerIsActive = false;\n\t\t\tlet wagerValue = -1;\n\t\t\tstate.forEach(wager => {\n\t\t\t\tif(wager.colorId === action.colorId && wager.playerId === action.playerId){\n\t\t\t\t\twagerIsActive = true;\n\t\t\t\t\twagerValue = wager.value;\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tif(wagerIsActive){\n\n\t\t\t\tif(wagerValue < 3){\n\t\t\t\t\t// Increment wager by 1\n\t\t\t\t\treturn state.map( wager => {\n\t\t\t\t\t\tif(wager.colorId === action.colorId && wager.playerId === action.playerId){\n\t\t\t\t\t\t\treturn Object.assign({}, wager, {\n\t\t\t\t\t\t\t\tvalue: (wager.value + 1)\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn wager\n\t\t\t\t\t});\n\n\t\t\t\t}else{\n\t\t\t\t\t// Delete wager\n\t\t\t\t\treturn state.filter(wager => (wager.colorId !== action.colorId || wager.playerId !== action.playerId));\n\t\t\t\t}\n\n\t\t\t}else{\n\n\t\t\t\t// If wager is not present, add it with default value of 1\n\t\t\t\treturn [\n\t\t\t\t\t...state,\n\t\t\t\t\t{\n\t\t\t\t\t\tplayerId: action.playerId,\n\t\t\t\t\t\tcolorId: action.colorId,\n\t\t\t\t\t\tvalue: 1\n\t\t\t\t\t}\n\t\t\t\t];\n\n\t\t\t}\n\n\t\tdefault:\n\t\t\treturn state;\n\t}\n}\n\nfunction players(state = INITIAL_PLAYERS, action){\n\n\tswitch (action.type) {\n\t\tcase TOGGLE_PLAYER:\n\n\t\t\treturn Object.assign({}, state, {\n\t\t\t\tactivePlayer: (state.activePlayer !== action.playerId ? action.playerId : 'error')\n\t\t\t});\n\n\t\tdefault:\n\t\t\treturn state;\n\t}\n}\n\nconst lostCitiesApp = combineReducers({\n\tnumbers,\n\twagers,\n\tplayers\n});\n\nexport default lostCitiesApp","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { render } from 'react-dom'\nimport { Provider } from 'react-redux'\nimport { createStore } from 'redux'\nimport lostCitiesApp from './appReducers'\n\n// import 'bootstrap/dist/css/bootstrap.css';\nimport \"bootswatch/dist/yeti/bootstrap.min.css\";\n\n\n\nimport {\n    toggleNumber,\n    toggleWager,\n    togglePlayer\n} from './appActions'\n\nconst store = createStore(lostCitiesApp)\n\n// Log the initial state\nconsole.log(store.getState())\n\n// Every time the state changes, log it\n// Note that subscribe() returns a function for unregistering the listener\nconst unsubscribe = store.subscribe(() => console.log(store.getState()))\n\n// Dispatch some actions\n// store.dispatch(toggleNumber('player1', 'blue', 3));\n// store.dispatch(toggleNumber('player1', 'blue', 6));\n// store.dispatch(toggleNumber('player1', 'blue', 9));\n// store.dispatch(toggleNumber('player1', 'blue', 3));\n// store.dispatch(toggleNumber('player1', 'blue', 6));\n// store.dispatch(toggleNumber('player2', 'blue', 3));\n// store.dispatch(toggleNumber('player2', 'red', 2));\n// store.dispatch(toggleNumber('player2', 'red', 3));\n// store.dispatch(toggleNumber('player2', 'red', 5));\n//\n// store.dispatch(toggleWager('player1', 'blue'));\n// store.dispatch(toggleWager('player1', 'blue'));\n// store.dispatch(toggleWager('player2', 'red'));\n// store.dispatch(toggleWager('player1', 'blue'));\n// store.dispatch(toggleWager('player1', 'blue'));\n// store.dispatch(toggleWager('player1', 'blue'));\n\n// store.dispatch(togglePlayer('player2'));\n// store.dispatch(togglePlayer('player1'));\n\n// Stop listening to state updates\nunsubscribe()\n\nrender(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}